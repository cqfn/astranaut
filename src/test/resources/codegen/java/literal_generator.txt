/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2023 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.uast.example.green;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.ChildDescriptor;
import org.cqfn.astranaut.core.base.EmptyFragment;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.base.Type;
import org.cqfn.astranaut.core.utils.MapUtils;

/**
 * Node that describes the 'IntegerLiteral' type.
 * @since 1.0
 */
public final class IntegerLiteral implements Node {
    /**
     * The type.
     */
    public static final Type TYPE = new IntegerLiteralType();

    /**
     * The fragment associated with the node.
     */
    private Fragment fragment;

    /**
     * The data.
     */
    private int data;

    /**
     * Constructor.
     */
    private IntegerLiteral() {
    }

    @Override
    public Type getType() {
        return IntegerLiteral.TYPE;
    }

    @Override
    public Fragment getFragment() {
        return this.fragment;
    }

    @Override
    public String getData() {
        return String.valueOf(this.data);
    }

    @Override
    public int getChildCount() {
        return 0;
    }

    @Override
    public Node getChild(final int index) {
        throw new IndexOutOfBoundsException();
    }

    /**
     * Type descriptor of the 'IntegerLiteral' node.
     * @since 1.0
     */
    private static class IntegerLiteralType implements Type {
        /**
         * The 'IntegerLiteral' string.
         */
        private static final String INTEGER_LITERAL = "IntegerLiteral";

        /**
         * Hierarchy.
         */
        private static final List<String> HIERARCHY =
            Collections.singletonList(
                IntegerLiteralType.INTEGER_LITERAL
            );

        /**
         * Properties.
         */
        private static final Map<String, String> PROPERTIES = new MapUtils<String, String>()
            .put("color", "green")
            .put("language", "common")
            .make();

        @Override
        public String getName() {
            return IntegerLiteralType.INTEGER_LITERAL;
        }

        @Override
        public List<ChildDescriptor> getChildTypes() {
            return Collections.emptyList();
        }

        @Override
        public List<String> getHierarchy() {
            return IntegerLiteralType.HIERARCHY;
        }

        @Override
        public Map<String, String> getProperties() {
            return IntegerLiteralType.PROPERTIES;
        }

        @Override
        public Builder createBuilder() {
            return new Constructor();
        }
    }

    /**
     * Class for 'IntegerLiteral' node construction.
     * @since 1.0
     */
    public static final class Constructor implements Builder {
        /**
         * The fragment associated with the node.
         */
        private Fragment fragment = EmptyFragment.INSTANCE;

        /**
         * The flag indicating that the builder has been initialized.
         */
        private boolean initialized;

        /**
         * The data.
         */
        private int data;

        @Override
        public void setFragment(final Fragment obj) {
            this.fragment = obj;
        }

        @Override
        public boolean setData(final String value) {
            boolean success = true;
            try {
                this.data = Integer.parseInt(value);
                this.initialized = true;
            } catch (final Exception ignored) {
                success = false;
            }
            return success;
        }

        @Override
        public boolean setChildrenList(final List<Node> list) {
            return list.isEmpty();
        }

        @Override
        public boolean isValid() {
            return this.initialized;
        }

        @Override
        public IntegerLiteral createNode() {
            if (!this.isValid()) {
                throw new IllegalStateException();
            }
            final IntegerLiteral node = new IntegerLiteral();
            node.fragment = this.fragment;
            node.data = this.data;
            return node;
        }
    }
}
