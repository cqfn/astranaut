/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2022 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.uast.example.js;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.cqfn.astranaut.core.Adapter;
import org.cqfn.astranaut.core.Converter;

/**
 * Adapter that converts syntax trees, prepared by the parser of the Js language.
 *
 * @since 1.0
 */
public final class JsAdapter extends Adapter {
    /**
     * The instance.
     */
    public static final Adapter INSTANCE = new JsAdapter();

    /**
     * The number of rules.
     */
    private static final int RULES_NUM = 200;

    /**
     * The prefix of a rule class name.
     */
    private static final String PREFIX = "org.uast.example.js.rules.Rule";

    /**
     * The name of the rule instance field.
     */
    private static final String RULE_INSTANCE = "INSTANCE";

    /**
     * Constructor.
     */
    private JsAdapter() {
        super(Collections.unmodifiableList(JsAdapter.init()), JsFactory.INSTANCE);
    }

    /**
     * Initializes the list of node converters.
     * @return The list of node converters
     */
    private static List<Converter> init() {
        final List<Converter> rules = new ArrayList<>(JsAdapter.RULES_NUM);
        for (int index = 0; index < JsAdapter.RULES_NUM; index = index + 1) {
            final String name = JsAdapter.PREFIX
                .concat(Integer.toString(index));
            try {
                final Class<?> cls = Class.forName(name);
                final Field instance = cls.getField(JsAdapter.RULE_INSTANCE);
                rules.add((Converter) instance.get(null));
            } catch (final ClassNotFoundException | IllegalAccessException
                | NoSuchFieldException ignored) {
                continue;
            }
        }
        return rules;
    }
}
