/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree;

import java.util.Locale;
import java.util.Map;
import org.cqfn.astranaut.core.base.DefaultFactory;
import org.cqfn.astranaut.core.base.Factory;
import org.cqfn.astranaut.core.base.Transformer;
import org.cqfn.astranaut.core.utils.MapUtils;

/**
 * Provider that aggregates all factories and transformers.
 * @since 1.0.0
 */
public final class Provider implements org.cqfn.astranaut.core.base.Provider {
    /**
     * The provider instance.
     */
    public static final Provider INSTANCE = new Provider();

    /**
     * Collection of factories supported by this provider.
     */
    private static final Map<String, Factory> FACTORIES =
        new MapUtils<String, Factory>()
            .put("common", org.cqfn.uast.tree.common.nodes.CommonFactory.INSTANCE)
            .make();

    /**
     * Collection of transformers supported by this provider.
     */
    private static final Map<String, Transformer> TRANSFORMERS =
        new MapUtils<String, Transformer>()
            .put("common", org.cqfn.uast.tree.common.rules.CommonTransformer.INSTANCE)
            .make();

    /**
     * Default transformer that doesn't transform anything.
     */
    private static final Transformer DEF_TRANS = node -> node;

    /**
     * Constructor.
     */
    private Provider() {
    }

    @Override
    public Factory getFactory(final String language) {
        final String lowercase = language.toLowerCase(Locale.ENGLISH);
        return Provider.FACTORIES.getOrDefault(lowercase, DefaultFactory.EMPTY);
    }

    @Override
    public Transformer getTransformer(final String language) {
        final String lowercase = language.toLowerCase(Locale.ENGLISH);
        return Provider.TRANSFORMERS.getOrDefault(lowercase, Provider.DEF_TRANS);
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.matchers;

import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.algorithms.conversion.Matcher;
import org.cqfn.astranaut.core.base.Node;

/**
 * Matches a node with the pattern '|('a..z'<#1>, 'A..Z'<#1>)' and extracts it if matched.
 * @since 1.0.0
 */
public final class Matcher0 implements Matcher {
    /**
     * The instance.
     */
    public static final Matcher INSTANCE = new Matcher0();

    /**
     * Constructor.
     */
    private Matcher0() {
    }

    @Override
    public boolean match(final Node node, final Extracted extracted) {
        return Matcher1.INSTANCE.match(node, extracted)
            || Matcher2.INSTANCE.match(node, extracted);
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.matchers;

import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.algorithms.conversion.Matcher;
import org.cqfn.astranaut.core.base.Node;

/**
 * Matches a node with the pattern ''a..z'<#1>' and extracts it if matched.
 * @since 1.0.0
 */
public final class Matcher1 implements Matcher {
    /**
     * The instance.
     */
    public static final Matcher INSTANCE = new Matcher1();

    /**
     * Constructor.
     */
    private Matcher1() {
    }

    @Override
    public boolean match(final Node node, final Extracted extracted) {
        final String data = node.getData();
        final boolean matches =
            node.belongsToGroup("Char")
            && data.length() == 1 && data.charAt(0) >= 'a' && data.charAt(0) <= 'z';
        if (matches) {
            extracted.addData(1, data);
        }
        return matches;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.matchers;

import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.algorithms.conversion.Matcher;
import org.cqfn.astranaut.core.base.Node;

/**
 * Matches a node with the pattern ''A..Z'<#1>' and extracts it if matched.
 * @since 1.0.0
 */
public final class Matcher2 implements Matcher {
    /**
     * The instance.
     */
    public static final Matcher INSTANCE = new Matcher2();

    /**
     * Constructor.
     */
    private Matcher2() {
    }

    @Override
    public boolean match(final Node node, final Extracted extracted) {
        final String data = node.getData();
        final boolean matches =
            node.belongsToGroup("Char")
            && data.length() == 1 && data.charAt(0) >= 'A' && data.charAt(0) <= 'Z';
        if (matches) {
            extracted.addData(1, data);
        }
        return matches;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.matchers;

import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.algorithms.conversion.Matcher;
import org.cqfn.astranaut.core.base.Node;

/**
 * Matches a node with the pattern ''0..9'<#1>' and extracts it if matched.
 * @since 1.0.0
 */
public final class Matcher3 implements Matcher {
    /**
     * The instance.
     */
    public static final Matcher INSTANCE = new Matcher3();

    /**
     * Constructor.
     */
    private Matcher3() {
    }

    @Override
    public boolean match(final Node node, final Extracted extracted) {
        final String data = node.getData();
        final boolean matches =
            node.belongsToGroup("Char")
            && data.length() == 1 && data.charAt(0) >= '0' && data.charAt(0) <= '9';
        if (matches) {
            extracted.addData(1, data);
        }
        return matches;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This package contains matchers that map subtrees to some pattern and extract nodes and data
 *  when matched.
 * @since 1.0.0
 */
package org.cqfn.uast.tree.common.matchers;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.Map;
import org.cqfn.astranaut.core.base.DefaultFactory;
import org.cqfn.astranaut.core.base.Factory;
import org.cqfn.astranaut.core.base.Type;
import org.cqfn.astranaut.core.utils.MapUtils;

/**
 * Factory that creates nodes for the 'Common' language.
 * @since 1.0.0
 */
public final class CommonFactory extends DefaultFactory {
    /**
     * The factory instance.
     */
    public static final Factory INSTANCE = new CommonFactory();

    /**
     * Default properties of nodes describing the language.
     */
    public static final Map<String, String> PROPERTIES =
        new MapUtils<String, String>().put("language", "common").put("color", "green").make();

    /**
     * Constructor.
     */
    private CommonFactory() {
        super(CommonFactory.createMapOfTypes());
    }

    /**
     * Returns collection of types supported by this factory.
     * @return All types supported by this factory, by name
     */
    private static Map<String, Type> createMapOfTypes() {
        return new MapUtils<String, Type>()
            .put(Digit.NAME, Digit.TYPE)
            .put(Letter.NAME, Letter.TYPE)
            .make();
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.EmptyFragment;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.base.Type;

/**
 * Node of the 'Digit' type.
 * @since 1.0.0
 */
public final class Digit implements Node {
    /**
     * Name of the type.
     */
    public static final String NAME = "Digit";

    /**
     * Type of the node.
     */
    public static final Type TYPE = new DigitType();

    /**
     * Fragment of source code that is associated with the node.
     */
    private Fragment fragment;

    /**
     * Value of the node.
     */
    private int data;

    /**
     * Constructor.
     */
    private Digit() {
    }

    @Override
    public Fragment getFragment() {
        return this.fragment;
    }

    @Override
    public Type getType() {
        return Digit.TYPE;
    }

    @Override
    public String getData() {
        return String.valueOf(this.data);
    }

    @Override
    public int getChildCount() {
        return 0;
    }

    @Override
    public Node getChild(final int index) {
        throw new IndexOutOfBoundsException();
    }

    /**
     * Returns the value of the node in native form.
     * @return Value of the node
     */
    public int getValue() {
        return this.data;
    }

    @Override
    public List<Node> getChildrenList() {
        return Collections.emptyList();
    }

    /**
     * Type implementation describing 'Digit' nodes.
     * @since 1.0.0
     */
    private static final class DigitType implements Type {
        /**
         * Node hierarchy.
         */
        private static final List<String> HIERARCHY = Collections.singletonList(Digit.NAME);

        @Override
        public String getName() {
            return Digit.NAME;
        }

        @Override
        public List<String> getHierarchy() {
            return DigitType.HIERARCHY;
        }

        @Override
        public Map<String, String> getProperties() {
            return CommonFactory.PROPERTIES;
        }

        @Override
        public Builder createBuilder() {
            return new Digit.Constructor();
        }
    }

    /**
     * Constructor (builder) that creates nodes of the 'Digit' type.
     * @since 1.0.0
     */
    public static final class Constructor implements Builder {
        /**
         * Fragment of source code that is associated with the node.
         */
        private Fragment fragment;

        /**
         * Value of the node to be created.
         */
        private int data;

        /**
         * Constructor.
         */
        public Constructor() {
            this.fragment = EmptyFragment.INSTANCE;
        }

        @Override
        public void setFragment(final Fragment object) {
            this.fragment = object;
        }

        /**
         * Sets the value of the node to be created.
         * @param value Value of the node
         */
        public void setValue(final int value) {
            this.data = value;
        }

        @Override
        public boolean setData(final String value) {
            boolean result = true;
            try {
                this.data = Integer.parseInt(value);
            } catch (final NumberFormatException ignored) {
                result = false;
            }
            return result;
        }

        @Override
        public boolean setChildrenList(final List<Node> list) {
            return list.isEmpty();
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public Node createNode() {
            final Digit node = new Digit();
            node.fragment = this.fragment;
            node.data = this.data;
            return node;
        }
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.EmptyFragment;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.base.Type;

/**
 * Node of the 'Letter' type.
 * @since 1.0.0
 */
public final class Letter implements Node {
    /**
     * Name of the type.
     */
    public static final String NAME = "Letter";

    /**
     * Type of the node.
     */
    public static final Type TYPE = new LetterType();

    /**
     * Fragment of source code that is associated with the node.
     */
    private Fragment fragment;

    /**
     * Value of the node.
     */
    private char data;

    /**
     * Constructor.
     */
    private Letter() {
    }

    @Override
    public Fragment getFragment() {
        return this.fragment;
    }

    @Override
    public Type getType() {
        return Letter.TYPE;
    }

    @Override
    public String getData() {
        return String.valueOf(this.data);
    }

    @Override
    public int getChildCount() {
        return 0;
    }

    @Override
    public Node getChild(final int index) {
        throw new IndexOutOfBoundsException();
    }

    /**
     * Returns the value of the node in native form.
     * @return Value of the node
     */
    public char getValue() {
        return this.data;
    }

    @Override
    public List<Node> getChildrenList() {
        return Collections.emptyList();
    }

    /**
     * Type implementation describing 'Letter' nodes.
     * @since 1.0.0
     */
    private static final class LetterType implements Type {
        /**
         * Node hierarchy.
         */
        private static final List<String> HIERARCHY = Collections.singletonList(Letter.NAME);

        @Override
        public String getName() {
            return Letter.NAME;
        }

        @Override
        public List<String> getHierarchy() {
            return LetterType.HIERARCHY;
        }

        @Override
        public Map<String, String> getProperties() {
            return CommonFactory.PROPERTIES;
        }

        @Override
        public Builder createBuilder() {
            return new Letter.Constructor();
        }
    }

    /**
     * Constructor (builder) that creates nodes of the 'Letter' type.
     * @since 1.0.0
     */
    public static final class Constructor implements Builder {
        /**
         * Fragment of source code that is associated with the node.
         */
        private Fragment fragment;

        /**
         * Value of the node to be created.
         */
        private char data;

        /**
         * Constructor.
         */
        public Constructor() {
            this.fragment = EmptyFragment.INSTANCE;
        }

        @Override
        public void setFragment(final Fragment object) {
            this.fragment = object;
        }

        /**
         * Sets the value of the node to be created.
         * @param value Value of the node
         */
        public void setValue(final char value) {
            this.data = value;
        }

        @Override
        public boolean setData(final String value) {
            boolean result = true;
            try {
                this.data = value.charAt(0);
            } catch (final IndexOutOfBoundsException ignored) {
                result = false;
            }
            return result;
        }

        @Override
        public boolean setChildrenList(final List<Node> list) {
            return list.isEmpty();
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public Node createNode() {
            final Letter node = new Letter();
            node.fragment = this.fragment;
            node.data = this.data;
            return node;
        }
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This package contains common ('green') nodes.
 * @since 1.0.0
 */
package org.cqfn.uast.tree.common.nodes;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.rules;

import java.util.LinkedList;
import java.util.List;
import org.cqfn.astranaut.core.algorithms.conversion.Converter;
import org.cqfn.astranaut.core.algorithms.conversion.DefaultTransformer;
import org.cqfn.astranaut.core.base.Transformer;
import org.cqfn.uast.tree.common.nodes.CommonFactory;

/**
 * Transformer that performs transformations for common cases.
 * @since 1.0.0
 */
public final class CommonTransformer extends DefaultTransformer {
    /**
     * The transformer instance.
     */
    public static final Transformer INSTANCE = new CommonTransformer();

    /**
     * Constructor.
     */
    private CommonTransformer() {
        super(CommonTransformer.collectConverters(), CommonFactory.INSTANCE);
    }

    /**
     * Collects converter objects for common cases.
     * @return List of converter objects
     */
    private static List<Converter> collectConverters() {
        final List<Converter> list = new LinkedList<>();
        Converter.collectConverters("org.cqfn.uast.tree.common.rules", list);
        return list;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.rules;

import java.util.List;
import java.util.Optional;
import org.cqfn.astranaut.core.algorithms.conversion.ConversionResult;
import org.cqfn.astranaut.core.algorithms.conversion.Converter;
import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.DummyNode;
import org.cqfn.astranaut.core.base.Factory;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.uast.tree.common.matchers.Matcher0;

/**
 * Converter implementing the rule '|('a..z'<#1>, 'A..Z'<#1>) -> Letter<#1>'.
 * @since 1.0.0
 */
public final class Converter0 implements Converter {
    /**
     * The instance.
     */
    public static final Converter INSTANCE = new Converter0();

    /**
     * Constructor.
     */
    private Converter0() {
    }

    @Override
    public Optional<ConversionResult> convert(final List<Node> list, final int index,
        final Factory factory) {
        Optional<ConversionResult> result = Optional.empty();
        do {
            if (index + 1 > list.size()) {
                break;
            }
            final Extracted extracted = new Extracted();
            final boolean matched = Matcher0.INSTANCE.match(list.get(index), extracted);
            if (!matched) {
                break;
            }
            final Fragment fragment = list.get(index).getFragment();
            final Node node = Converter0.buildRoot(factory, fragment, extracted);
            if (node == DummyNode.INSTANCE) {
                break;
            }
            result = Optional.of(new ConversionResult(node, 1));
        } while (false);
        return result;
    }

    @Override
    public int getMinConsumed() {
        return 1;
    }

    /**
     * Constructs a node based on the descriptor 'Letter<#1>'.
     * @param factory Factory for creating nodes
     * @param fragment Code fragment that is covered by the node being created
     * @param extracted Extracted nodes and data
     * @return Created node
     */
    private static Node buildRoot(final Factory factory, final Fragment fragment,
        final Extracted extracted) {
        Node result = DummyNode.INSTANCE;
        final Builder builder = factory.createBuilder("Letter");
        do {
            if (!builder.setData(extracted.getData(1))) {
                break;
            }
            if (!builder.isValid()) {
                break;
            }
            builder.setFragment(fragment);
            result = builder.createNode();
        } while (false);
        return result;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.rules;

import java.util.List;
import java.util.Optional;
import org.cqfn.astranaut.core.algorithms.conversion.ConversionResult;
import org.cqfn.astranaut.core.algorithms.conversion.Converter;
import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.DummyNode;
import org.cqfn.astranaut.core.base.Factory;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.uast.tree.common.matchers.Matcher3;

/**
 * Converter implementing the rule ''0..9'<#1> -> Digit<#1>'.
 * @since 1.0.0
 */
public final class Converter1 implements Converter {
    /**
     * The instance.
     */
    public static final Converter INSTANCE = new Converter1();

    /**
     * Constructor.
     */
    private Converter1() {
    }

    @Override
    public Optional<ConversionResult> convert(final List<Node> list, final int index,
        final Factory factory) {
        Optional<ConversionResult> result = Optional.empty();
        do {
            if (index + 1 > list.size()) {
                break;
            }
            final Extracted extracted = new Extracted();
            final boolean matched = Matcher3.INSTANCE.match(list.get(index), extracted);
            if (!matched) {
                break;
            }
            final Fragment fragment = list.get(index).getFragment();
            final Node node = Converter1.buildRoot(factory, fragment, extracted);
            if (node == DummyNode.INSTANCE) {
                break;
            }
            result = Optional.of(new ConversionResult(node, 1));
        } while (false);
        return result;
    }

    @Override
    public int getMinConsumed() {
        return 1;
    }

    /**
     * Constructs a node based on the descriptor 'Digit<#1>'.
     * @param factory Factory for creating nodes
     * @param fragment Code fragment that is covered by the node being created
     * @param extracted Extracted nodes and data
     * @return Created node
     */
    private static Node buildRoot(final Factory factory, final Fragment fragment,
        final Extracted extracted) {
        Node result = DummyNode.INSTANCE;
        final Builder builder = factory.createBuilder("Digit");
        do {
            if (!builder.setData(extracted.getData(1))) {
                break;
            }
            if (!builder.isValid()) {
                break;
            }
            builder.setFragment(fragment);
            result = builder.createNode();
        } while (false);
        return result;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This package contains transformation rules for common ('green') nodes.
 * @since 1.0.0
 */
package org.cqfn.uast.tree.common.rules;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Nodes describing syntax trees, and algorithms to process them, generated from the description
 *  in the DSL language.
 * @since 1.0.0
 */
package org.cqfn.uast.tree;

