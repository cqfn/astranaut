/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2024 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.base.Type;

/**
 * Node of the 'Entities' type.
 * @since 1.0.0
 */
public final class Entities implements Node {
    /**
     * Name of the type.
     */
    public static final String NAME = "Entities";

    /**
     * Type of the node.
     */
    public static final Type TYPE = new EntitiesType();

    /**
     * Fragment of source code that is associated with the node.
     */
    private Fragment fragment;

    /**
     * List of child nodes.
     */
    private List<Entity> children;

    @Override
    public Fragment getFragment() {
        return this.fragment;
    }

    @Override
    public Type getType() {
        return Entities.TYPE;
    }

    @Override
    public String getData() {
        return "";
    }

    @Override
    public int getChildCount() {
        return this.children.size();
    }

    @Override
    public Node getChild(final int index) {
        return this.children.get(index);
    }

    /**
     * Returns child node by its index.
     */
    public Entity getEntity(final int index) {
        return this.children.get(index);
    }

    /**
     * Type implementation describing 'Entities' nodes.
     * @since 1.0.0
     */
    private static final class EntitiesType implements Type {
        @Override
        public String getName() {
            return Entities.NAME;
        }

        @Override
        public Builder createBuilder() {
            return new Entities.Constructor();
        }
    }

    /**
     * Constructor (builder) that creates nodes of the 'Entities' type.
     * @since 1.0.0
     */
    public static final class Constructor implements Builder {
        /**
         * Fragment of source code that is associated with the node.
         */
        private Fragment fragment;

        /**
         * List of child nodes.
         */
        private List<Entity> children;

        /**
         * Constructor.
         */
        public Constructor() {
            this.children = Collections.emptyList();
        }

        @Override
        public void setFragment(final Fragment object) {
            this.fragment = object;
        }

        @Override
        public boolean setData(final String value) {
            return value.isEmpty();
        }

        @Override
        public boolean setChildrenList(final List<Node> list) {
            final List<Entity> temp = new ArrayList<>(list.size());
            boolean result = true;
            for (final Node node: list) {
                if (node instanceof Entity) {
                    temp.add((Entity) node);
                } else {
                    result = false;
                    break;
                }
            }
            this.children = temp;
            return result;
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public Node createNode() {
            final Entities node = new Entities();
            node.fragment = this.fragment;
            node.children = Collections.unmodifiableList(this.children);
            return node;
        }
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2024 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.Collections;
import java.util.List;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.base.Type;

/**
 * Node of the 'Entity' type.
 * @since 1.0.0
 */
public final class Entity implements Node {
    /**
     * Name of the type.
     */
    public static final String NAME = "Entity";

    /**
     * Type of the node.
     */
    public static final Type TYPE = new EntityType();

    /**
     * Fragment of source code that is associated with the node.
     */
    private Fragment fragment;

    @Override
    public Fragment getFragment() {
        return this.fragment;
    }

    @Override
    public Type getType() {
        return Entity.TYPE;
    }

    @Override
    public String getData() {
        return "";
    }

    @Override
    public int getChildCount() {
        return 0;
    }

    @Override
    public Node getChild(final int index) {
        throw new IndexOutOfBoundsException();
    }

    @Override
    public List<Node> getChildrenList() {
        return Collections.emptyList();
    }

    /**
     * Type implementation describing 'Entity' nodes.
     * @since 1.0.0
     */
    private static final class EntityType implements Type {
        @Override
        public String getName() {
            return Entity.NAME;
        }

        @Override
        public Builder createBuilder() {
            return new Entity.Constructor();
        }
    }

    /**
     * Constructor (builder) that creates nodes of the 'Entity' type.
     * @since 1.0.0
     */
    public static final class Constructor implements Builder {
        /**
         * Fragment of source code that is associated with the node.
         */
        private Fragment fragment;

        @Override
        public void setFragment(final Fragment object) {
            this.fragment = object;
        }

        @Override
        public boolean setData(final String value) {
            return value.isEmpty();
        }

        @Override
        public boolean setChildrenList(final List<Node> list) {
            return list.isEmpty();
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public Node createNode() {
            final Entity node = new Entity();
            node.fragment = this.fragment;
            return node;
        }
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2024 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This package contains common ('green') nodes.
 * @since 1.0.0
 */
package org.cqfn.uast.tree.common.nodes;

