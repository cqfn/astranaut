/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree;

import java.util.Locale;
import java.util.Map;
import org.cqfn.astranaut.core.base.DefaultFactory;
import org.cqfn.astranaut.core.base.Factory;
import org.cqfn.astranaut.core.base.Transformer;
import org.cqfn.astranaut.core.utils.MapUtils;

/**
 * Provider that aggregates all factories and transformers.
 * @since 1.0.0
 */
public final class Provider implements org.cqfn.astranaut.core.base.Provider {
    /**
     * The provider instance.
     */
    public static final Provider INSTANCE = new Provider();

    /**
     * Collection of factories supported by this provider.
     */
    private static final Map<String, Factory> FACTORIES =
        new MapUtils<String, Factory>()
            .put("common", org.cqfn.uast.tree.common.nodes.CommonFactory.INSTANCE)
            .make();

    /**
     * Collection of transformers supported by this provider.
     */
    private static final Map<String, Transformer> TRANSFORMERS =
        new MapUtils<String, Transformer>()
            .put("common", org.cqfn.uast.tree.common.rules.CommonTransformer.INSTANCE)
            .make();

    /**
     * Default transformer that doesn't transform anything.
     */
    private static final Transformer DEF_TRANS = node -> node;

    /**
     * Constructor.
     */
    private Provider() {
    }

    @Override
    public Factory getFactory(final String language) {
        final String lowercase = language.toLowerCase(Locale.ENGLISH);
        return Provider.FACTORIES.getOrDefault(lowercase, DefaultFactory.EMPTY);
    }

    @Override
    public Transformer getTransformer(final String language) {
        final String lowercase = language.toLowerCase(Locale.ENGLISH);
        return Provider.TRANSFORMERS.getOrDefault(lowercase, Provider.DEF_TRANS);
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.matchers;

import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.algorithms.conversion.Matcher;
import org.cqfn.astranaut.core.base.Node;

/**
 * Matches a node with the pattern 'AAA'.
 * @since 1.0.0
 */
public final class Matcher0 implements Matcher {
    /**
     * The instance.
     */
    public static final Matcher INSTANCE = new Matcher0();

    /**
     * Constructor.
     */
    private Matcher0() {
    }

    @Override
    public boolean match(final Node node, final Extracted extracted) {
        return node.belongsToGroup("AAA") && node.getChildCount() == 0;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.matchers;

import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.algorithms.conversion.Matcher;
import org.cqfn.astranaut.core.base.Node;

/**
 * Matches a node with the pattern 'BBB'.
 * @since 1.0.0
 */
public final class Matcher1 implements Matcher {
    /**
     * The instance.
     */
    public static final Matcher INSTANCE = new Matcher1();

    /**
     * Constructor.
     */
    private Matcher1() {
    }

    @Override
    public boolean match(final Node node, final Extracted extracted) {
        return node.belongsToGroup("BBB") && node.getChildCount() == 0;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.matchers;

import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.algorithms.conversion.Matcher;
import org.cqfn.astranaut.core.base.Node;

/**
 * Matches a node with the pattern 'CCC'.
 * @since 1.0.0
 */
public final class Matcher2 implements Matcher {
    /**
     * The instance.
     */
    public static final Matcher INSTANCE = new Matcher2();

    /**
     * Constructor.
     */
    private Matcher2() {
    }

    @Override
    public boolean match(final Node node, final Extracted extracted) {
        return node.belongsToGroup("CCC") && node.getChildCount() == 0;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.matchers;

import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.algorithms.conversion.Matcher;
import org.cqfn.astranaut.core.base.Node;

/**
 * Matches a node with the pattern 'DDD(#1)' and extracts nested nodes if matched.
 * @since 1.0.0
 */
public final class Matcher3 implements Matcher {
    /**
     * The instance.
     */
    public static final Matcher INSTANCE = new Matcher3();

    /**
     * Constructor.
     */
    private Matcher3() {
    }

    @Override
    public boolean match(final Node node, final Extracted extracted) {
        final boolean matches = node.belongsToGroup("DDD") && node.getChildCount() == 1;
        if (matches) {
            extracted.addNode(1, node.getChild(0));
        }
        return matches;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.matchers;

import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.algorithms.conversion.Matcher;
import org.cqfn.astranaut.core.base.Node;

/**
 * Matches a node with the pattern 'EEE'.
 * @since 1.0.0
 */
public final class Matcher4 implements Matcher {
    /**
     * The instance.
     */
    public static final Matcher INSTANCE = new Matcher4();

    /**
     * Constructor.
     */
    private Matcher4() {
    }

    @Override
    public boolean match(final Node node, final Extracted extracted) {
        return node.belongsToGroup("EEE") && node.getChildCount() == 0;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This package contains matchers that map subtrees to some pattern and extract nodes and data
 *  when matched.
 * @since 1.0.0
 */
package org.cqfn.uast.tree.common.matchers;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.Map;
import org.cqfn.astranaut.core.base.DefaultFactory;
import org.cqfn.astranaut.core.base.Factory;
import org.cqfn.astranaut.core.base.Type;
import org.cqfn.astranaut.core.utils.MapUtils;

/**
 * Factory that creates nodes for the 'Common' language.
 * @since 1.0.0
 */
public final class CommonFactory extends DefaultFactory {
    /**
     * The factory instance.
     */
    public static final Factory INSTANCE = new CommonFactory();

    /**
     * Default properties of nodes describing the language.
     */
    public static final Map<String, String> PROPERTIES =
        new MapUtils<String, String>().put("language", "common").put("color", "green").make();

    /**
     * Constructor.
     */
    private CommonFactory() {
        super(CommonFactory.createMapOfTypes());
    }

    /**
     * Returns collection of types supported by this factory.
     * @return All types supported by this factory, by name
     */
    private static Map<String, Type> createMapOfTypes() {
        return new MapUtils<String, Type>()
            .put(ComplexFakeNode.NAME, ComplexFakeNode.TYPE)
            .put(FifthFakeNode.NAME, FifthFakeNode.TYPE)
            .put(FirstFakeNode.NAME, FirstFakeNode.TYPE)
            .put(FourthFakeNode.NAME, FourthFakeNode.TYPE)
            .put(SecondFakeNode.NAME, SecondFakeNode.TYPE)
            .put(ThirdFakeNode.NAME, ThirdFakeNode.TYPE).make();
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.cqfn.astranaut.core.algorithms.NodeAllocator;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.ChildDescriptor;
import org.cqfn.astranaut.core.base.EmptyFragment;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.base.Type;
import org.cqfn.astranaut.core.utils.ListUtils;

/**
 * Node of the 'ComplexFakeNode' type.
 * @since 1.0.0
 */
public final class ComplexFakeNode implements Node {
    /**
     * Name of the type.
     */
    public static final String NAME = "ComplexFakeNode";

    /**
     * Type of the node.
     */
    public static final Type TYPE = new ComplexFakeNodeType();

    /**
     * Fragment of source code that is associated with the node.
     */
    private Fragment fragment;

    /**
     * List of child nodes.
     */
    private List<Node> children;

    /**
     * Constructor.
     */
    private ComplexFakeNode() {
    }

    @Override
    public Fragment getFragment() {
        return this.fragment;
    }

    @Override
    public Type getType() {
        return ComplexFakeNode.TYPE;
    }

    @Override
    public String getData() {
        return "";
    }

    @Override
    public int getChildCount() {
        return this.children.size();
    }

    @Override
    public Node getChild(final int index) {
        return this.children.get(index);
    }

    @Override
    public List<Node> getChildrenList() {
        return this.children;
    }

    /**
     * Type implementation describing 'ComplexFakeNode' nodes.
     * @since 1.0.0
     */
    private static final class ComplexFakeNodeType implements Type {
        /**
         * The 'FirstFakeNode' type name.
         */
        private static final String TYPE_FRST_FK_ND = "FirstFakeNode";

        /**
         * The 'SecondFakeNode' type name.
         */
        private static final String TYPE_SCND_FK_ND = "SecondFakeNode";

        /**
         * The 'ThirdFakeNode' type name.
         */
        private static final String TYPE_THRD_FK_ND = "ThirdFakeNode";

        /**
         * The 'FourthFakeNode' type name.
         */
        private static final String TYPE_FRTH_FK_ND = "FourthFakeNode";

        /**
         * The 'FifthFakeNode' type name.
         */
        private static final String TYPE_FFTH_FK_ND = "FifthFakeNode";

        /**
         * List of child node descriptors.
         */
        private static final List<ChildDescriptor> CHILD_TYPES =
            ChildDescriptor.create()
                .required(ComplexFakeNodeType.TYPE_FRST_FK_ND)
                .required(ComplexFakeNodeType.TYPE_SCND_FK_ND)
                .required(ComplexFakeNodeType.TYPE_THRD_FK_ND)
                .required(ComplexFakeNodeType.TYPE_FRTH_FK_ND)
                .required(ComplexFakeNodeType.TYPE_FFTH_FK_ND)
                .build();

        /**
         * Node hierarchy.
         */
        private static final List<String> HIERARCHY =
            Collections.singletonList(ComplexFakeNode.NAME);

        @Override
        public List<ChildDescriptor> getChildTypes() {
            return ComplexFakeNodeType.CHILD_TYPES;
        }

        @Override
        public String getName() {
            return ComplexFakeNode.NAME;
        }

        @Override
        public List<String> getHierarchy() {
            return ComplexFakeNodeType.HIERARCHY;
        }

        @Override
        public Map<String, String> getProperties() {
            return CommonFactory.PROPERTIES;
        }

        @Override
        public Builder createBuilder() {
            return new ComplexFakeNode.Constructor();
        }
    }

    /**
     * Constructor (builder) that creates nodes of the 'ComplexFakeNode' type.
     * @since 1.0.0
     */
    public static final class Constructor implements Builder {
        /**
         * Fragment of source code that is associated with the node.
         */
        private Fragment fragment;

        /**
         * First node.
         */
        private FirstFakeNode first;

        /**
         * Second node.
         */
        private SecondFakeNode second;

        /**
         * Third node.
         */
        private ThirdFakeNode third;

        /**
         * Fourth node.
         */
        private FourthFakeNode fourth;

        /**
         * Fifth node.
         */
        private FifthFakeNode fifth;

        /**
         * Constructor.
         */
        public Constructor() {
            this.fragment = EmptyFragment.INSTANCE;
        }

        @Override
        public void setFragment(final Fragment object) {
            this.fragment = object;
        }

        @Override
        public boolean setData(final String value) {
            return value.isEmpty();
        }

        @Override
        public boolean setChildrenList(final List<Node> list) {
            final NodeAllocator allocator = new NodeAllocator(ComplexFakeNodeType.CHILD_TYPES);
            final Node[] nodes = new Node[5];
            final boolean result = allocator.allocate(nodes, list);
            if (result) {
                this.first = (FirstFakeNode) nodes[0];
                this.second = (SecondFakeNode) nodes[1];
                this.third = (ThirdFakeNode) nodes[2];
                this.fourth = (FourthFakeNode) nodes[3];
                this.fifth = (FifthFakeNode) nodes[4];
            }
            return result;
        }

        @Override
        public boolean isValid() {
            return this.first != null
                && this.second != null
                && this.third != null && this.fourth != null && this.fifth != null;
        }

        @Override
        public Node createNode() {
            if (!this.isValid()) {
                throw new IllegalStateException();
            }
            final ComplexFakeNode node = new ComplexFakeNode();
            node.fragment = this.fragment;
            node.children =
                new ListUtils<Node>()
                .add(this.first, this.second, this.third, this.fourth, this.fifth).make();
            return node;
        }
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.EmptyFragment;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.base.Type;

/**
 * Node of the 'FifthFakeNode' type.
 * @since 1.0.0
 */
public final class FifthFakeNode implements Node {
    /**
     * Name of the type.
     */
    public static final String NAME = "FifthFakeNode";

    /**
     * Type of the node.
     */
    public static final Type TYPE = new FifthFakeNodeType();

    /**
     * Fragment of source code that is associated with the node.
     */
    private Fragment fragment;

    /**
     * Constructor.
     */
    private FifthFakeNode() {
    }

    @Override
    public Fragment getFragment() {
        return this.fragment;
    }

    @Override
    public Type getType() {
        return FifthFakeNode.TYPE;
    }

    @Override
    public String getData() {
        return "";
    }

    @Override
    public int getChildCount() {
        return 0;
    }

    @Override
    public Node getChild(final int index) {
        throw new IndexOutOfBoundsException();
    }

    @Override
    public List<Node> getChildrenList() {
        return Collections.emptyList();
    }

    /**
     * Type implementation describing 'FifthFakeNode' nodes.
     * @since 1.0.0
     */
    private static final class FifthFakeNodeType implements Type {
        /**
         * Node hierarchy.
         */
        private static final List<String> HIERARCHY =
            Collections.singletonList(FifthFakeNode.NAME);

        @Override
        public String getName() {
            return FifthFakeNode.NAME;
        }

        @Override
        public List<String> getHierarchy() {
            return FifthFakeNodeType.HIERARCHY;
        }

        @Override
        public Map<String, String> getProperties() {
            return CommonFactory.PROPERTIES;
        }

        @Override
        public Builder createBuilder() {
            return new FifthFakeNode.Constructor();
        }
    }

    /**
     * Constructor (builder) that creates nodes of the 'FifthFakeNode' type.
     * @since 1.0.0
     */
    public static final class Constructor implements Builder {
        /**
         * Fragment of source code that is associated with the node.
         */
        private Fragment fragment;

        /**
         * Constructor.
         */
        public Constructor() {
            this.fragment = EmptyFragment.INSTANCE;
        }

        @Override
        public void setFragment(final Fragment object) {
            this.fragment = object;
        }

        @Override
        public boolean setData(final String value) {
            return value.isEmpty();
        }

        @Override
        public boolean setChildrenList(final List<Node> list) {
            return list.isEmpty();
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public Node createNode() {
            final FifthFakeNode node = new FifthFakeNode();
            node.fragment = this.fragment;
            return node;
        }
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.EmptyFragment;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.base.Type;

/**
 * Node of the 'FirstFakeNode' type.
 * @since 1.0.0
 */
public final class FirstFakeNode implements Node {
    /**
     * Name of the type.
     */
    public static final String NAME = "FirstFakeNode";

    /**
     * Type of the node.
     */
    public static final Type TYPE = new FirstFakeNodeType();

    /**
     * Fragment of source code that is associated with the node.
     */
    private Fragment fragment;

    /**
     * Constructor.
     */
    private FirstFakeNode() {
    }

    @Override
    public Fragment getFragment() {
        return this.fragment;
    }

    @Override
    public Type getType() {
        return FirstFakeNode.TYPE;
    }

    @Override
    public String getData() {
        return "";
    }

    @Override
    public int getChildCount() {
        return 0;
    }

    @Override
    public Node getChild(final int index) {
        throw new IndexOutOfBoundsException();
    }

    @Override
    public List<Node> getChildrenList() {
        return Collections.emptyList();
    }

    /**
     * Type implementation describing 'FirstFakeNode' nodes.
     * @since 1.0.0
     */
    private static final class FirstFakeNodeType implements Type {
        /**
         * Node hierarchy.
         */
        private static final List<String> HIERARCHY =
            Collections.singletonList(FirstFakeNode.NAME);

        @Override
        public String getName() {
            return FirstFakeNode.NAME;
        }

        @Override
        public List<String> getHierarchy() {
            return FirstFakeNodeType.HIERARCHY;
        }

        @Override
        public Map<String, String> getProperties() {
            return CommonFactory.PROPERTIES;
        }

        @Override
        public Builder createBuilder() {
            return new FirstFakeNode.Constructor();
        }
    }

    /**
     * Constructor (builder) that creates nodes of the 'FirstFakeNode' type.
     * @since 1.0.0
     */
    public static final class Constructor implements Builder {
        /**
         * Fragment of source code that is associated with the node.
         */
        private Fragment fragment;

        /**
         * Constructor.
         */
        public Constructor() {
            this.fragment = EmptyFragment.INSTANCE;
        }

        @Override
        public void setFragment(final Fragment object) {
            this.fragment = object;
        }

        @Override
        public boolean setData(final String value) {
            return value.isEmpty();
        }

        @Override
        public boolean setChildrenList(final List<Node> list) {
            return list.isEmpty();
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public Node createNode() {
            final FirstFakeNode node = new FirstFakeNode();
            node.fragment = this.fragment;
            return node;
        }
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.EmptyFragment;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.base.Type;

/**
 * Node of the 'FourthFakeNode' type.
 * @since 1.0.0
 */
public final class FourthFakeNode implements Node {
    /**
     * Name of the type.
     */
    public static final String NAME = "FourthFakeNode";

    /**
     * Type of the node.
     */
    public static final Type TYPE = new FourthFakeNodeType();

    /**
     * Fragment of source code that is associated with the node.
     */
    private Fragment fragment;

    /**
     * Constructor.
     */
    private FourthFakeNode() {
    }

    @Override
    public Fragment getFragment() {
        return this.fragment;
    }

    @Override
    public Type getType() {
        return FourthFakeNode.TYPE;
    }

    @Override
    public String getData() {
        return "";
    }

    @Override
    public int getChildCount() {
        return 0;
    }

    @Override
    public Node getChild(final int index) {
        throw new IndexOutOfBoundsException();
    }

    @Override
    public List<Node> getChildrenList() {
        return Collections.emptyList();
    }

    /**
     * Type implementation describing 'FourthFakeNode' nodes.
     * @since 1.0.0
     */
    private static final class FourthFakeNodeType implements Type {
        /**
         * Node hierarchy.
         */
        private static final List<String> HIERARCHY =
            Collections.singletonList(FourthFakeNode.NAME);

        @Override
        public String getName() {
            return FourthFakeNode.NAME;
        }

        @Override
        public List<String> getHierarchy() {
            return FourthFakeNodeType.HIERARCHY;
        }

        @Override
        public Map<String, String> getProperties() {
            return CommonFactory.PROPERTIES;
        }

        @Override
        public Builder createBuilder() {
            return new FourthFakeNode.Constructor();
        }
    }

    /**
     * Constructor (builder) that creates nodes of the 'FourthFakeNode' type.
     * @since 1.0.0
     */
    public static final class Constructor implements Builder {
        /**
         * Fragment of source code that is associated with the node.
         */
        private Fragment fragment;

        /**
         * Constructor.
         */
        public Constructor() {
            this.fragment = EmptyFragment.INSTANCE;
        }

        @Override
        public void setFragment(final Fragment object) {
            this.fragment = object;
        }

        @Override
        public boolean setData(final String value) {
            return value.isEmpty();
        }

        @Override
        public boolean setChildrenList(final List<Node> list) {
            return list.isEmpty();
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public Node createNode() {
            final FourthFakeNode node = new FourthFakeNode();
            node.fragment = this.fragment;
            return node;
        }
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.EmptyFragment;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.base.Type;

/**
 * Node of the 'SecondFakeNode' type.
 * @since 1.0.0
 */
public final class SecondFakeNode implements Node {
    /**
     * Name of the type.
     */
    public static final String NAME = "SecondFakeNode";

    /**
     * Type of the node.
     */
    public static final Type TYPE = new SecondFakeNodeType();

    /**
     * Fragment of source code that is associated with the node.
     */
    private Fragment fragment;

    /**
     * Constructor.
     */
    private SecondFakeNode() {
    }

    @Override
    public Fragment getFragment() {
        return this.fragment;
    }

    @Override
    public Type getType() {
        return SecondFakeNode.TYPE;
    }

    @Override
    public String getData() {
        return "";
    }

    @Override
    public int getChildCount() {
        return 0;
    }

    @Override
    public Node getChild(final int index) {
        throw new IndexOutOfBoundsException();
    }

    @Override
    public List<Node> getChildrenList() {
        return Collections.emptyList();
    }

    /**
     * Type implementation describing 'SecondFakeNode' nodes.
     * @since 1.0.0
     */
    private static final class SecondFakeNodeType implements Type {
        /**
         * Node hierarchy.
         */
        private static final List<String> HIERARCHY =
            Collections.singletonList(SecondFakeNode.NAME);

        @Override
        public String getName() {
            return SecondFakeNode.NAME;
        }

        @Override
        public List<String> getHierarchy() {
            return SecondFakeNodeType.HIERARCHY;
        }

        @Override
        public Map<String, String> getProperties() {
            return CommonFactory.PROPERTIES;
        }

        @Override
        public Builder createBuilder() {
            return new SecondFakeNode.Constructor();
        }
    }

    /**
     * Constructor (builder) that creates nodes of the 'SecondFakeNode' type.
     * @since 1.0.0
     */
    public static final class Constructor implements Builder {
        /**
         * Fragment of source code that is associated with the node.
         */
        private Fragment fragment;

        /**
         * Constructor.
         */
        public Constructor() {
            this.fragment = EmptyFragment.INSTANCE;
        }

        @Override
        public void setFragment(final Fragment object) {
            this.fragment = object;
        }

        @Override
        public boolean setData(final String value) {
            return value.isEmpty();
        }

        @Override
        public boolean setChildrenList(final List<Node> list) {
            return list.isEmpty();
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public Node createNode() {
            final SecondFakeNode node = new SecondFakeNode();
            node.fragment = this.fragment;
            return node;
        }
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.nodes;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.EmptyFragment;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.base.Type;

/**
 * Node of the 'ThirdFakeNode' type.
 * @since 1.0.0
 */
public final class ThirdFakeNode implements Node {
    /**
     * Name of the type.
     */
    public static final String NAME = "ThirdFakeNode";

    /**
     * Type of the node.
     */
    public static final Type TYPE = new ThirdFakeNodeType();

    /**
     * Fragment of source code that is associated with the node.
     */
    private Fragment fragment;

    /**
     * Constructor.
     */
    private ThirdFakeNode() {
    }

    @Override
    public Fragment getFragment() {
        return this.fragment;
    }

    @Override
    public Type getType() {
        return ThirdFakeNode.TYPE;
    }

    @Override
    public String getData() {
        return "";
    }

    @Override
    public int getChildCount() {
        return 0;
    }

    @Override
    public Node getChild(final int index) {
        throw new IndexOutOfBoundsException();
    }

    @Override
    public List<Node> getChildrenList() {
        return Collections.emptyList();
    }

    /**
     * Type implementation describing 'ThirdFakeNode' nodes.
     * @since 1.0.0
     */
    private static final class ThirdFakeNodeType implements Type {
        /**
         * Node hierarchy.
         */
        private static final List<String> HIERARCHY =
            Collections.singletonList(ThirdFakeNode.NAME);

        @Override
        public String getName() {
            return ThirdFakeNode.NAME;
        }

        @Override
        public List<String> getHierarchy() {
            return ThirdFakeNodeType.HIERARCHY;
        }

        @Override
        public Map<String, String> getProperties() {
            return CommonFactory.PROPERTIES;
        }

        @Override
        public Builder createBuilder() {
            return new ThirdFakeNode.Constructor();
        }
    }

    /**
     * Constructor (builder) that creates nodes of the 'ThirdFakeNode' type.
     * @since 1.0.0
     */
    public static final class Constructor implements Builder {
        /**
         * Fragment of source code that is associated with the node.
         */
        private Fragment fragment;

        /**
         * Constructor.
         */
        public Constructor() {
            this.fragment = EmptyFragment.INSTANCE;
        }

        @Override
        public void setFragment(final Fragment object) {
            this.fragment = object;
        }

        @Override
        public boolean setData(final String value) {
            return value.isEmpty();
        }

        @Override
        public boolean setChildrenList(final List<Node> list) {
            return list.isEmpty();
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public Node createNode() {
            final ThirdFakeNode node = new ThirdFakeNode();
            node.fragment = this.fragment;
            return node;
        }
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This package contains common ('green') nodes.
 * @since 1.0.0
 */
package org.cqfn.uast.tree.common.nodes;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.rules;

import java.util.LinkedList;
import java.util.List;
import org.cqfn.astranaut.core.algorithms.conversion.Converter;
import org.cqfn.astranaut.core.algorithms.conversion.DefaultTransformer;
import org.cqfn.astranaut.core.base.Transformer;
import org.cqfn.uast.tree.common.nodes.CommonFactory;

/**
 * Transformer that performs transformations for common cases.
 * @since 1.0.0
 */
public final class CommonTransformer extends DefaultTransformer {
    /**
     * The transformer instance.
     */
    public static final Transformer INSTANCE = new CommonTransformer();

    /**
     * Constructor.
     */
    private CommonTransformer() {
        super(CommonTransformer.collectConverters(), CommonFactory.INSTANCE);
    }

    /**
     * Collects converter objects for common cases.
     * @return List of converter objects
     */
    private static List<Converter> collectConverters() {
        final List<Converter> list = new LinkedList<>();
        Converter.collectConverters("org.cqfn.uast.tree.common.rules", list);
        return list;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.cqfn.uast.tree.common.rules;

import java.util.List;
import java.util.Optional;
import org.cqfn.astranaut.core.algorithms.conversion.ConversionResult;
import org.cqfn.astranaut.core.algorithms.conversion.Converter;
import org.cqfn.astranaut.core.algorithms.conversion.Extracted;
import org.cqfn.astranaut.core.base.Builder;
import org.cqfn.astranaut.core.base.DummyNode;
import org.cqfn.astranaut.core.base.Factory;
import org.cqfn.astranaut.core.base.Fragment;
import org.cqfn.astranaut.core.base.Node;
import org.cqfn.astranaut.core.utils.ListUtils;
import org.cqfn.uast.tree.common.matchers.Matcher0;
import org.cqfn.uast.tree.common.matchers.Matcher1;
import org.cqfn.uast.tree.common.matchers.Matcher2;
import org.cqfn.uast.tree.common.matchers.Matcher3;
import org.cqfn.uast.tree.common.matchers.Matcher4;

/**
 * Converter implementing the rule 'AAA, BBB, CCC, DDD(#1), EEE -> ComplexFakeNode(FirstFakeNode,
 *  SecondFakeNode(#1), ThirdFakeNode, FourthFakeNode, FifthFakeNode)'.
 * @since 1.0.0
 */
public final class Converter0 implements Converter {
    /**
     * The instance.
     */
    public static final Converter INSTANCE = new Converter0();

    /**
     * Constructor.
     */
    private Converter0() {
    }

    @Override
    public Optional<ConversionResult> convert(final List<Node> list, final int index,
        final Factory factory) {
        Optional<ConversionResult> result = Optional.empty();
        do {
            if (index + 5 > list.size()) {
                break;
            }
            final Extracted extracted = new Extracted();
            final boolean matched =
                Matcher0.INSTANCE.match(list.get(index), extracted)
                && Matcher1.INSTANCE.match(list.get(1 + index), extracted)
                && Matcher2.INSTANCE.match(list.get(2 + index), extracted)
                && Matcher3.INSTANCE.match(list.get(3 + index), extracted)
                && Matcher4.INSTANCE.match(list.get(4 + index), extracted);
            if (!matched) {
                break;
            }
            final Fragment fragment = Fragment.fromNodes(list.subList(index, index + 5));
            final Node node = Converter0.buildRoot(factory, fragment, extracted);
            if (node == DummyNode.INSTANCE) {
                break;
            }
            result = Optional.of(new ConversionResult(node, 5));
        } while (false);
        return result;
    }

    @Override
    public int getMinConsumed() {
        return 5;
    }

    /**
     * Constructs a node based on the descriptor 'ComplexFakeNode(FirstFakeNode,
     *  SecondFakeNode(#1), ThirdFakeNode, FourthFakeNode, FifthFakeNode)'.
     * @param factory Factory for creating nodes
     * @param fragment Code fragment that is covered by the node being created
     * @param extracted Extracted nodes and data
     * @return Created node
     */
    private static Node buildRoot(final Factory factory, final Fragment fragment,
        final Extracted extracted) {
        Node result = DummyNode.INSTANCE;
        final Builder builder = factory.createBuilder("ComplexFakeNode");
        do {
            final List<Node> children =
                new ListUtils<Node>()
                .add(Converter0.buildSecond(factory))
                .add(Converter0.buildThird(factory, extracted))
                .add(Converter0.buildFourth(factory))
                .add(Converter0.buildFifth(factory)).add(Converter0.buildSixth(factory)).make();
            if (!builder.setChildrenList(children)) {
                break;
            }
            if (!builder.isValid()) {
                break;
            }
            builder.setFragment(fragment);
            result = builder.createNode();
        } while (false);
        return result;
    }

    /**
     * Constructs a node based on the descriptor 'FirstFakeNode'.
     * @param factory Factory for creating nodes
     * @return Created node
     */
    private static Node buildSecond(final Factory factory) {
        Node result = DummyNode.INSTANCE;
        final Builder builder = factory.createBuilder("FirstFakeNode");
        do {
            if (!builder.isValid()) {
                break;
            }
            result = builder.createNode();
        } while (false);
        return result;
    }

    /**
     * Constructs a node based on the descriptor 'SecondFakeNode(#1)'.
     * @param factory Factory for creating nodes
     * @param extracted Extracted nodes and data
     * @return Created node
     */
    private static Node buildThird(final Factory factory, final Extracted extracted) {
        Node result = DummyNode.INSTANCE;
        final Builder builder = factory.createBuilder("SecondFakeNode");
        do {
            final List<Node> children = extracted.getNodes(1);
            if (!builder.setChildrenList(children)) {
                break;
            }
            if (!builder.isValid()) {
                break;
            }
            result = builder.createNode();
        } while (false);
        return result;
    }

    /**
     * Constructs a node based on the descriptor 'ThirdFakeNode'.
     * @param factory Factory for creating nodes
     * @return Created node
     */
    private static Node buildFourth(final Factory factory) {
        Node result = DummyNode.INSTANCE;
        final Builder builder = factory.createBuilder("ThirdFakeNode");
        do {
            if (!builder.isValid()) {
                break;
            }
            result = builder.createNode();
        } while (false);
        return result;
    }

    /**
     * Constructs a node based on the descriptor 'FourthFakeNode'.
     * @param factory Factory for creating nodes
     * @return Created node
     */
    private static Node buildFifth(final Factory factory) {
        Node result = DummyNode.INSTANCE;
        final Builder builder = factory.createBuilder("FourthFakeNode");
        do {
            if (!builder.isValid()) {
                break;
            }
            result = builder.createNode();
        } while (false);
        return result;
    }

    /**
     * Constructs a node based on the descriptor 'FifthFakeNode'.
     * @param factory Factory for creating nodes
     * @return Created node
     */
    private static Node buildSixth(final Factory factory) {
        Node result = DummyNode.INSTANCE;
        final Builder builder = factory.createBuilder("FifthFakeNode");
        do {
            if (!builder.isValid()) {
                break;
            }
            result = builder.createNode();
        } while (false);
        return result;
    }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This package contains transformation rules for common ('green') nodes.
 * @since 1.0.0
 */
package org.cqfn.uast.tree.common.rules;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Ivan Kniazkov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Nodes describing syntax trees, and algorithms to process them, generated from the description
 *  in the DSL language.
 * @since 1.0.0
 */
package org.cqfn.uast.tree;

